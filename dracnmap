#!/usr/bin/env bash

#============================================================================================================
#                         Dracnmap for dracos
#
#                      Welcome and dont disclaimer
#              Dracnmap Author By Edo -maland- a.k.a screetsec
#                     Tested On Kali Linux and Dracos
#       contact me in screetsec@gmail.com or screetsec@dracos-linux.org
#          OS Penetration From Indonesia : https://dracos-linux.org/
#
#        v3.0.0 (testing release), trimstray (contact@nslab.at)
#============================================================================================================


################################################################################
############################# Prepare environment ##############################
################################################################################

if [[ $EUID -ne 0 ]] ; then

  echo -en "ERROR! Run this script with root user.\n"
  _exit_ 1

fi

if [ -z "${DISPLAY:-}" ]; then

  echo -en "The script should be executed inside a X (graphical) session.\n"
  _exit_ 1

else

  resize -s 50 89 > /dev/null

fi

# Setting permissions in the script environment:
#   0022 - less restrictive settings (default value)
#   0027 - for better security than above
#   0077 - only for user access (more restrictive)
umask 0027


################################################################################
######################## Global variables and functions ########################
################################################################################

# The arrays that store call parameters.
# shellcheck disable=SC2034
__init_params=()
__script_params=("$@")

# Color table.
export cyan='\e[0;36m'
export green='\e[0;34m'
export okegreen='\033[92m'
export lightgreen='\e[1;32m'
export white='\e[1;37m'
export red='\e[1;31m'
export yellow='\e[1;33m'
export BlueF='\e[1;34m'

# Script info.
export Version='3.0.0'
export Codename='Blackhawk'

readonly __cli_prompt="Screetsec@"
# shellcheck disable=SC2034
__cli_banner=""

# Store the name of the script and directory call.
readonly _init_name="$(basename "$0")"
readonly _init_directory="$(dirname "$(readlink -f "$0")")"

# Set of directories.
readonly _src_directory="${_init_directory}/src"
readonly _modules_directory="${_src_directory}/modules"
readonly _output_directory="${_init_directory}/output"

# Store functions (not modules).
readonly _functions_file="${_src_directory}/functions"

# External configuration file.
readonly _config_file="${_init_directory}/config"

# Set of modules. The configuration of each of them is in src/modules directory.
readonly _modules_stack=("brutense" "auth" "brd" "exploit" "fuzzer" "malware" \
                         "vuln" "nse" "zenmapscript" "webservice" "pingbebeb")

# ``````````````````````````````````````````````````````````````````````````````
# Function name: _exit_()
#
# Description:
#   Covers the default exit command.
#
# Usage:
#   _exit_ value
#
# Examples:
#   _exit_ 0
#

function _exit_() {

  local _FUNCTION_ID="_exit_"
  local _STATE=0

  _STATUS="$1"

  if [[ "$_STATUS" -eq 1 ]] ; then

    echo -en "$yellow[*] Thank You For Using Dracnmap =)\n"
    echo -en "$yellow[*] Check Dracos Linux LFS, Penetration OS From Indonesia =P\n"

  fi

  exit "$_STATUS"

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: _get_trap_SIG()
#
# Description:
#   Ensuring they always perform necessary cleanup operations,
#   even when something unexpected goes wrong.
#
# Usage:
#   trap _get_trap_SIG SIGNAL
#
# Examples:
#   trap _get_trap_SIG EXIT
#

function _get_trap_SIG() {

  local _FUNCTION_ID="_get_trap_SIG"
  local _STATE="${_STATUS:-}"

  local _signal="$1"

  if [[ "$_signal" == "EXIT" ]] ; then

    _STATE="${_STATUS:-}"

  elif [[ "$_signal" == "SIGS" ]] ; then

    _nmap_processes=($(pidof nmap))

    if [[ ${#_nmap_processes[@]} -ne 0 ]] ; then

      _STATE="${_STATUS:-}"

    else

      # In this block the kill command was originally used,
      # however, it suspended the operation of dracnmap.
      # The lack of this command terminates the process
      # and does not cause the above problems.
      _STATE=254

    fi

  else

    _STATE="${_STATUS:-}"

  fi

  if [ -z "$_STATE" ] ; then _STATE=255 ; fi

  return $_STATE

}


################################################################################
######################### Main function (script init) ##########################
################################################################################

function __main__() {

  # shellcheck disable=SC2034
  local _FUNCTION_ID="__main__"
  local _STATE=0

  # Use of one construction to load modules, functions and config file.
  for _filename in "$_functions_file" "${_modules_stack[@]}" "$_config_file" ; do

    if [[ "$_filename" == *"/functions"* ]] ; then

      _mpath="$_filename"

    elif [[ "$_filename" == *"/config"* ]] ; then

      _mpath="$_filename"

    else

      _mpath="${_modules_directory}/${_filename}"

    fi

    if [[ ! -z "$_mpath" ]] && [[ -e "$_mpath" ]] ; then

      # If the file exists is loaded.
      # shellcheck disable=SC1090
      . "$_mpath"

    elif [[ -z "$_mpath" ]] ; then

      printf "incorrectly loaded '%s' file (incorrect filename)" "$_mpath"
      _exit_ 2

    else

      printf "incorrectly loaded '%s' file (does not exist?)" "$_mpath"
      _exit_ 2

    fi

  done

  clear

  echo -e ""
  echo -e "$okegreen                ___                    __                           $red,_____     "
  echo -e "$okegreen               /   \_ __ __ _  ___  /\ \ \_ __ ___   __ _ _ ____   _$red|___ /     "
  echo -e "$okegreen              / /\ / '__/ _\` |/ __|/  \/ / '_ \` _ \ / _\` | '_ \ \ / /$red |_ \  "
  echo -e "$okegreen             / /_//| | | (_| | (__/ /\  /| | | | | | (_| | |_) \ V /$red ___) |    "
  echo -e "$okegreen            /___,' |_|  \__,_|\___\_\ \/ |_| |_| |_|\__,_| .__/ \_/ $red|____/     "
  echo -e "$okegreen                                                         |_|                       "
  echo -e "$okegreen"
  echo -e "$okegreen-----------------------------------------------------------------------------------------"
  echo -e "$white"'-- -- +=[ (c) 2016-2018 | dracos-linux.org | Linuxsec.org | Pentester Indonesia ]=+ -- --'
  echo -e "$cyan"'-- -- +=[ Author: Screetsec < Edo Maland >                                      ]=+ -- --'
  echo -e "$cyan"'-- -- +=[ Contributors: trimstray (contact@nslab.at)                            ]=+ -- --'
  echo -e ""

  # We place here used commands at script runtime, as strings to anything
  # unnecessarily run.
  readonly commands=(basename dirname date grep awk nmap proxychains)

  # If you intend to specify the full path to the command we do it like:
  # readonly exec_gzip="/bin/gzip"

  # Stores the names of the missing commands.
  # shellcheck disable=SC2034
  missing_hash=
  # shellcheck disable=SC2034
  missing_counter=0

  tput sgr0

  printf "\n:: [\e[1;39m%s\e[m] ::\n\n" "SYSTEM INFO"

  _os_info=$(uname -ov)

  if [[ -z "$_os_info" ]] ; then

    printf "    %-10s\n" "unknown"
    sleep 0.2

  else

    printf "    %-10s\n" "$_os_info"
    sleep 0.2

  fi

  printf "\n:: [\e[1;39m%s\e[m] ::\n\n" "CHECK COMMANDS"

  for i in "${commands[@]}" ; do

    if [[ ! -z "$i" ]] ; then

      hash "$i" >/dev/null 2>&1 ; state="$?"

      # If the command was not found put it in the array
      if [[ "$state" -ne 0 ]] ; then

        printf "    %-18s [\e[0;31m%-4s\e[m]\n" "$i" "fail"
        sleep 0.2

        # It is a good idea to terminate the script at this stage
        # with information for the user to fix the errors.
        printf "\n    \e[1;31m%s\e[m\n\n" "Before start please fix errors."
        _exit_ 2

      else

        printf "    %-18s [\e[0;32m%-4s\e[m]\n" "$i" "pass"
        sleep 0.2

      fi

    fi

  done

  printf "\n:: [\e[1;39m%s\e[m] ::\n\n" "CHECK NMAP VERSION"

  _nmap_version=$(nmap --version | grep version)

  if [[ -z "$_nmap_version" ]] ; then

    printf "    %-10s\n" "unknown"
    sleep 0.2

  else

    printf "    %-10s\n" "$_nmap_version"
    sleep 0.2

  fi

  printf "\n:: [\e[1;39m%s\e[m] ::\n\n" "CHECK TCP/IP"

  timeout 5 bash -c "</dev/tcp/8.8.8.8/53" >/dev/null 2>&1
  _kstate="$?"

  if [[ "$_kstate" -eq 0 ]] ; then

    printf "    %-18s [\e[0;32m%s\e[m]\n" "tcp:8.8.8.8:53" "connected"

  else

    printf "    %-10s [\e[0;31m%-10s\e[m]\n" "tcp:8.8.8.8:53" "not connected"

  fi

  sleep 2

  ####################### User interface initialization ########################
  # ````````````````````````````````````````````````````````````````````````````

  # Load the main menu.
  menu

  # Load the command line iinterface.
  _init_cli

  # ````````````````````````````````````````````````````````````````````````````

}

trap "_get_trap_SIG EXIT" EXIT

# Trap the SIGKILL signal prevents the console from hanging when you press ctrl+c.
# shellcheck disable=SC2173
trap "_get_trap_SIG SIGS" SIGHUP SIGTERM SIGKILL SIGINT

# An array as an argument to a function call __main__,
# is required if we want to operate on arguments of type $1, $2, ...
__main__ "${__script_params[@]}"

_exit_ 0
